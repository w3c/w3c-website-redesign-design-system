---
title: Layouts
nav: layouts
layout: content-styles.njk
---
{% import "views/macros/_iframe.njk" as macroExample %}
{% import "views/macros/layouts/_box.njk" as boxMacros %}
{% import "views/macros/layouts/_center.njk" as centerMacros %}
{% import "views/macros/layouts/_cluster.njk" as clusterMacros %}
{% import "views/macros/layouts/_cover.njk" as coverMacros %}
{% import "views/macros/layouts/_frame.njk" as frameMacros %}
{% import "views/macros/layouts/_sidebar.njk" as sidebarMacros %}

<h1>{{ title }}</h1>

Here you will find examples of the basic layout types, which can be combined and customised to make a variety of components and templates.

## Box

The box layout is a simple container for grouping content within a defined region. It uses the class `.l-box`.

The box layout deliberately treats padding and borders equally on all sides. If your container needs asymmetrical styling, then it's a container with a more specific purpose and not a box.

### Default box

{{ macroExample.showCase('Default box layout', '../demos/box-default.html') }}

```html
{{ boxMacros.boxDefault('Default box layout') }}
```

### Box without padding

For a box without padding, use the modifier class `.l-box--no-padding`

{{ macroExample.showCase('Box layout with no padding', '../demos/box-nopadding.html') }}

```html
{{ boxMacros.boxNoPadding('Box layout with no padding') }}
```

### Box without border

For a box without a border, use the modifier class `.l-box--no-border`. Because high contrast themes tend to eliminate <code>background-color</code>, this class adds a transparent outline to maintain the box shape. Negative <code>outline-offset</code> moves the outline inside the box perimeter so that it doesn't impact its overall size.

{{ macroExample.showCase('Box layout with no border', '../demos/box-noborder.html') }}

```html
{{ boxMacros.boxNoBorder('Box layout with no border') }}
```

### Box without padding or border

{{ macroExample.showCase('Box layout with no padding and no border', '../demos/box-simple.html') }}

```html
{{ boxMacros.boxSimple('Box layout with no padding and no border') }}
```

## Center

The center layout creates a vertical strip of content inside a given container element, with equal spacing on either side. It uses the class `.l-center`. Apollo uses this technique on the `main` element (without applying the class, in this instance).

Padding on the sides of the center layout maintains a space between its contents and the edges of the parent container, even when the parent is narrower than the `max-width` of the center layout.

The center layout uses an exception to Apollo's global `box-sizing: border-box;` declaration. It uses `box-sizing: content-box;` to prevent the padding from making the content narrower than intended.

The following example uses an inline style to override the default `max-width`. In practice, you should apply an additional class to override any of the default styles in a specific context.

{{ macroExample.showCase('Center layout inside a box layout', '../demos/center.html') }}

```html
{{ centerMacros.centerLayout('Center layout in action') }}
```

## Cluster

The cluster layout suits any group of elements that differ in length, are liable to wrap and need even spacing between them, e.g. lists of tags or groups of buttons. It uses the class `.l-cluster`.

The cluster layout needs an inner container - in the following example it's provided by the `ul`. The cluster items - `li` in this example - sit within this container. Each item has a margin on all sides. Their parent container has a negative margin of the same size as the cluster items. This creates the even spacing between items. `overflow: hidden;` is used to tidy up the edges.

{{ macroExample.showCase('Cluster layout', '../demos/cluster.html') }}

```html
{{ clusterMacros.clusterLayout() }}
```

## Cover

The cover layout creates a container with a minimum height to hold vertically centered content, ideal for "above the fold" hero blocks and sections needing visual prominence. It uses the classes `.l-cover` for the container and `.principal` for the content to be centred.

The following examples use inline styles to specify background and text colors. In practice, you should apply an additional class to override/add to the default styles in a specific context.

### Cover with horizontal centering using a utility class

{{ macroExample.showCase('Cover layout with content horizontally centered with a utility class', '../demos/cover-utility.html') }}

```html
{{ coverMacros.coverUtility('Here is the principal content') }}
```

### Cover with a nested center layout for horizontal centering

{{ macroExample.showCase('Cover layout with a nested center layout', '../demos/cover-center.html') }}

```html
{{ coverMacros.coverCenter('Here is the principal content') }}
```

### Cover with optional header and footer content

This example uses an inline style to change the default alignment of the "header". In practice, you should use the CSS stylesheet to target the element directly or via a custom class to achieve this.

{{ macroExample.showCase('Cover layout with optional header and footer', '../demos/cover-extras.html') }}

```html
{{ coverMacros.coverExtras('The principal content', '"Header" content, e.g. a close button', '"Footer" content') }}
```

## Frame

The frame layout is useful for cropping media (images and video) to a specific aspect ratio. It uses the class `.l-frame` and additional modifier classes for pre-defined aspect ratios. These modifier classes determine the amount of vertical padding on the frame, which then acts as a window onto the content inside.

If using `figure` with `figcaption`, make sure to apply the .l-frame class to an inner `picture` or `div` rather than directly to the `figure` to avoid obscuring the `figcaption`.

The following examples use an inline style setting a width on a parent container using the box layout. This is purely for the purpose of demonstrating the visual appearance of the frame modifier classes.

### Frame with 16:9 aspect ratio

{{ macroExample.showCase('Frame layout with 16:9 aspect ratio', '../demos/frame-169.html') }}

```html
{{ frameMacros.frame169('An example of the 16:9 frame modifier') }}
```

### Frame with 3:2 aspect ratio

{{ macroExample.showCase('Frame layout with 3:2 aspect ratio', '../demos/frame-32.html') }}

```html
{{ frameMacros.frame32('An example of the 3:2 frame modifier') }}
```

### Frame with 4:3 aspect ratio

{{ macroExample.showCase('Frame layout with 4:3 aspect ratio', '../demos/frame-43.html') }}

```html
{{ frameMacros.frame43('An example of the 4:3 frame modifier') }}
```

### Frame with square aspect ratio

{{ macroExample.showCase('Frame layout with square aspect ratio', '../demos/frame-square.html') }}

```html
{{ frameMacros.frameSquare('An example of the square frame modifier') }}
```

### Internet Explorer/Edge considerations

The default frame layout uses `object-fit: cover` for images and videos. This is not supported in Internet Explorer or Edge prior to version 16 and in Edge 16-18 it is only supported on images. However, the Chromium Edge browser, which does support object-fit, is now available to systems as far back as Windows 7.

For images, a JavaScript workaround is available that swaps the image for a background-image instead, although this removes the accessibility benefits offered by images. Alternatively, you may prefer to forgo `object-fit` and adapt your instance of the frame to rely on absolute positioning and hiding any overflow.

### Image credit

Photo by [Steve Johnson](https://unsplash.com/photos/-zASKXkwkIY) on [Unsplash](https://unsplash.com/)

## Sidebar

The sidebar layout creates two content panels inside a containing element. These two panels stack vertically, until there is enough horizontal space for them to sit alongside each other. One content panel is narrower than the other, acting as a "sidebar".

The point at which the content panels site side-by-side horizontally is determined by setting a `flex-basis` on the sidebar panel and a `min-width` on the larger panel. Viewport media queries are not required, so the sidebar layout will nest nicely inside of other containers.

The following examples use inline styles setting background colors, which is purely for the purpose of demonstrating the visual appearance of the sidebar layout.

### Basic sidebar

Notice that the panel content is not spaced from the panel edges in this example. If we used padding to achieve this it would cause the flexbox layout to break.

{{ macroExample.showCase('Basic sidebar layout', '../demos/sidebar-basic.html') }}

```html
{{ sidebarMacros.sidebarBasic('Wide panel', 'Narrow "sidebar" panel') }}
```

### Sidebar with nested box layouts for spacing content

Using a box layout inside the panels allows us to space content away from the edges.

{{ macroExample.showCase('Basic sidebar layout', '../demos/sidebar-spaced.html') }}

```html
{{ sidebarMacros.sidebarBox('Wide panel', 'Narrow "sidebar" panel') }}
```

### Sidebar without gutter spacing

This uses the modifier class `.l-sidebar--tight` to remove margins.

{{ macroExample.showCase('Sidebar without gutter spacing', '../demos/sidebar-tight.html') }}

```html
{{ sidebarMacros.sidebarTight('Wide panel', 'Narrow "sidebar" panel') }}
```

### Using intrinsic content width for the sidebar

We can opt to not specify a width on the narrow "sidebar" panel (by not declaring a `flex-basis` value) and let the content of the sidebar determine its width. This example uses inline styles to demonstrate this effect. In practice, you should apply an additional class to override any of the default styles in a specific context.

{{ macroExample.showCase('Sidebar with intrinsic width', '../demos/sidebar-intrinsic.html') }}

```html
{{ sidebarMacros.sidebarIntrinsic() }}
```